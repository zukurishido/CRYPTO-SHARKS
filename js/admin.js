// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
window.isAuthenticated = false;
let isAdminPanelVisible = false;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö
let loginAttempts = 0;
const MAX_LOGIN_ATTEMPTS = 5;
const LOCKOUT_TIME = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
let lastLoginAttempt = 0;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
function isLocked() {
    if (loginAttempts >= MAX_LOGIN_ATTEMPTS) {
        const timePassedSinceLastAttempt = Date.now() - lastLoginAttempt;
        if (timePassedSinceLastAttempt < LOCKOUT_TIME) {
            const minutesLeft = Math.ceil((LOCKOUT_TIME - timePassedSinceLastAttempt) / 60000);
            showNotification(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${minutesLeft} –º–∏–Ω—É—Ç`, 'error');
            return true;
        } else {
            loginAttempts = 0;
        }
    }
    return false;
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuth() {
    if (!window.isAuthenticated) {
        showNotification('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'error');
        showLoginForm();
        return false;
    }
    return true;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function initializeAdminPanel() {
    const adminButton = document.getElementById('adminButton');
    const closeAdmin = document.getElementById('closeAdmin');

    if (adminButton && closeAdmin) {
        adminButton.addEventListener('click', () => {
            if (!window.isAuthenticated) {
                showLoginForm();
            } else {
                toggleAdminPanel();
            }
        });

        closeAdmin.addEventListener('click', toggleAdminPanel);
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    const savedAuth = localStorage.getItem('cryptoSharksAuth');
    if (savedAuth) {
        try {
            const authData = JSON.parse(savedAuth);
            if (authData.expiry > Date.now()) {
                window.isAuthenticated = true;
                window.githubConfig.token = atob(authData.token);
                document.body.classList.add('is-admin');
            } else {
                localStorage.removeItem('cryptoSharksAuth');
            }
        } catch (e) {
            localStorage.removeItem('cryptoSharksAuth');
        }
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
function toggleAdminPanel() {
    const adminPanel = document.getElementById('adminPanel');
    isAdminPanelVisible = !isAdminPanelVisible;
    
    if (adminPanel) {
        adminPanel.classList.toggle('visible');
        
        if (isAdminPanelVisible && window.isAuthenticated) {
            showBulkInput();
        }
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
function showLoginForm() {
    if (isLocked()) return;

    const form = document.querySelector('.admin-form');
    if (form) {
        form.innerHTML = `
            <div class="login-form">
                <div class="input-group">
                    <input type="password" 
                           id="passwordInput" 
                           placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" 
                           class="admin-input"
                           autocomplete="current-password"
                           onkeypress="if(event.key === 'Enter') login()">
                    <button onclick="login()" class="add-btn">–í–æ–π—Ç–∏</button>
                </div>
                <div class="login-attempts">
                    –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${MAX_LOGIN_ATTEMPTS - loginAttempts}
                </div>
            </div>
        `;
        
        toggleAdminPanel();
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        setTimeout(() => {
            const input = document.getElementById('passwordInput');
            if (input) input.focus();
        }, 100);
    }
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—Ö–æ–¥
async function login() {
    if (isLocked()) return;

    const passwordInput = document.getElementById('passwordInput');
    if (!passwordInput) return;

    const password = passwordInput.value;
    const validHash = window.githubConfig.adminHash;
    
    if (btoa(password) === validHash) {
        window.isAuthenticated = true;
        window.githubConfig.token = atob(window.githubConfig.encryptedToken);
        document.body.classList.add('is-admin');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –Ω–∞ 24 —á–∞—Å–∞
        localStorage.setItem('cryptoSharksAuth', JSON.stringify({
            token: window.githubConfig.encryptedToken,
            expiry: Date.now() + (24 * 60 * 60 * 1000)
        }));

        loginAttempts = 0;
        showBulkInput();
        showNotification('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥', 'success');
    } else {
        loginAttempts++;
        lastLoginAttempt = Date.now();
        showNotification(`–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${MAX_LOGIN_ATTEMPTS - loginAttempts}`, 'error');
        
        if (loginAttempts >= MAX_LOGIN_ATTEMPTS) {
            showNotification(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–∞–Ω–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –º–∏–Ω—É—Ç`, 'error');
        }
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function showBulkInput() {
    if (!checkAuth()) return;

    const form = document.querySelector('.admin-form');
    if (form) {
        form.innerHTML = `
            <div class="mode-switcher mb-4">
                <button onclick="showBulkInput()" class="mode-btn active">
                    <span class="mode-icon">üì•</span>
                    –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                </button>
                <button onclick="showRegularForm()" class="mode-btn">
                    <span class="mode-icon">‚ûï</span>
                    –û–¥–∏–Ω–æ—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                </button>
                <button onclick="showTradesList()" class="mode-btn">
                    <span class="mode-icon">üìã</span>
                    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏
                </button>
            </div>

            <div class="input-group">
                <label>–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫</label>
                <div class="format-helper">
                    <button onclick="showFormatHelp()" class="help-btn">
                        –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ ‚ÑπÔ∏è
                    </button>
                </div>
                <textarea id="bulkInput" 
                          class="trade-input" 
                          placeholder="SPOT:
BTC +55%
ETH -12%
SOL +33%

FUTURES:
BNB +35% (5x)
DOGE -15% (10x)
ETH +76% (20x)

DeFi:
UNI +25%
AAVE -18%"></textarea>
                <div class="button-group">
                    <button onclick="processBulkTrades()" class="add-btn">
                        –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫–∏
                    </button>
                    <button onclick="clearInput()" class="clear-btn">
                        –û—á–∏—Å—Ç–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    }
}

// –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
function showFormatHelp() {
    showNotification(`
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
        SPOT/FUTURES/DeFi: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        BTC +55% : –ø–∞—Ä–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        ETH -12% : –ø–∞—Ä–∞ –∏ —É–±—ã—Ç–æ–∫
        SOL +33% (5x) : –ø–∞—Ä–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–ª–µ—á–æ
    `, 'info', 8000);
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function showRegularForm() {
    if (!checkAuth()) return;

    const form = document.querySelector('.admin-form');
    if (form) {
        form.innerHTML = `
            <div class="mode-switcher mb-4">
                <button onclick="showBulkInput()" class="mode-btn">
                    <span class="mode-icon">üì•</span>
                    –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                </button>
                <button onclick="showRegularForm()" class="mode-btn active">
                    <span class="mode-icon">‚ûï</span>
                    –û–¥–∏–Ω–æ—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                </button>
                <button onclick="showTradesList()" class="mode-btn">
                    <span class="mode-icon">üìã</span>
                    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏
                </button>
            </div>

            <div class="input-group">
                <label>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏</label>
                <input type="text" 
                       id="pairInput" 
                       class="trade-input" 
                       placeholder="–ü–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC)"
                       autocomplete="off">
                
                <div class="result-group">
                    <input type="number" 
                           id="resultInput" 
                           class="trade-input" 
                           step="0.01" 
                           placeholder="–†–µ–∑—É–ª—å—Ç–∞—Ç –≤ % (–Ω–∞–ø—Ä–∏–º–µ—Ä: 55 –∏–ª–∏ -12)"
                           autocomplete="off">
                           
                    <input type="text" 
                           id="leverageInput" 
                           class="trade-input" 
                           placeholder="–ü–ª–µ—á–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20x)"
                           autocomplete="off">
                </div>

                <div class="category-select">
                    <label>
                        <input type="radio" name="category" value="SPOT" checked>
                        SPOT
                    </label>
                    <label>
                        <input type="radio" name="category" value="FUTURES">
                        FUTURES
                    </label>
                    <label>
                        <input type="radio" name="category" value="DeFi">
                        DeFi
                    </label>
                </div>

                <button onclick="processSingleTrade()" class="add-btn">
                    –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É
                </button>
            </div>
        `;

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—è –ø–ª–µ—á–∞ –¥–ª—è FUTURES
        const categoryInputs = form.querySelectorAll('input[name="category"]');
        const leverageInput = document.getElementById('leverageInput');
        
        categoryInputs.forEach(input => {
            input.addEventListener('change', () => {
                leverageInput.style.display = input.value === 'FUTURES' ? 'block' : 'none';
            });
        });
    }
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
function showTradesList() {
    if (!checkAuth()) return;

    const year = document.getElementById('yearSelect').value;
    const month = document.getElementById('monthSelect').value;
    const category = document.getElementById('categorySelect').value;
    
    const trades = getPeriodData(year, month, category);
    
    const form = document.querySelector('.admin-form');
    if (form) {
        let html = `
            <div class="mode-switcher mb-4">
                <button onclick="showBulkInput()" class="mode-btn">
                    <span class="mode-icon">üì•</span>
                    –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                </button>
                <button onclick="showRegularForm()" class="mode-btn">
                    <span class="mode-icon">‚ûï</span>
                    –û–¥–∏–Ω–æ—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                </button>
                <button onclick="showTradesList()" class="mode-btn active">
                    <span class="mode-icon">üìã</span>
                    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏
                </button>
            </div>

            <div class="current-period">
                –ü–µ—Ä–∏–æ–¥: ${month} ${year}, ${category}
            </div>
        `;
        
        html += '<div class="trades-list">';
        
        if (trades.length === 0) {
            html += '<p class="text-center text-gray-500">–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</p>';
        } else {
            trades.forEach((trade, index) => {
                const resultColor = trade.result > 0 ? '#00ff9d' : '#ff4444';
                const resultText = `${trade.result > 0 ? '+' : ''}${trade.result}%${trade.leverage ? ` (${trade.leverage})` : ''}`;
                const date = new Date(trade.timestamp).toLocaleDateString();
                
                html += `
                    <div class="trade-item fade-in">
                        <div class="trade-content">
                            <div class="trade-info">
                                <span class="trade-pair">#${trade.pair}</span>
                                <span style="color: ${resultColor}">${resultText}</span>
                            </div>
                            <div class="trade-date">${date}</div>
                        </div>
                        <div class="trade-actions">
                            <button onclick="confirmDelete('${year}', '${month}', '${category}', ${index})" 
                                    class="delete-btn">
                                –£–¥–∞–ª–∏—Ç—å
                            </button>
                        </div>
                    </div>
                `;
            });
        }
        
        html += '</div>';
        form.innerHTML = html;
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
async function processBulkTrades() {
    if (!checkAuth()) return;

    const bulkInput = document.getElementById('bulkInput');
    if (!bulkInput) return;

    const text = bulkInput.value.trim();
    if (!text) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', 'error');
        return;
    }

    const trades = parseTrades(text);
    
    if (trades.length === 0) {
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–¥–µ–ª–∫–∏', 'error');
        return;
    }

    const year = document.getElementById('yearSelect').value;
    const month = document.getElementById('monthSelect').value;
    const category = document.getElementById('categorySelect').value;

    const success = await addTradeData(year, month, category, trades);
    if (success) {
        bulkInput.value = '';
        showNotification(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${trades.length} —Å–¥–µ–ª–æ–∫`, 'success');
        updateContent();
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
async function processSingleTrade() {
    if (!checkAuth()) return;

    const pair = document.getElementById('pairInput').value.trim();
    const result = parseFloat(document.getElementById('resultInput').value);
    const leverage = document.getElementById('leverageInput').value.trim();
    const category = document.querySelector('input[name="category"]:checked').value;

    if (!pair || isNaN(result)) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
        return;
    }

    const trade = {
        id: Date.now() + Math.random(),
        pair: pair.toUpperCase(),
        result: result,
        leverage: leverage ? leverage : '',
        status: result > 0 ? 'profit' : 'loss',
        category: category,
        timestamp: new Date().toISOString()
    };

    const year = document.getElementById('yearSelect').value;
    const month = document.getElementById('monthSelect').value;

    const success = await addTradeData(year, month, category, trade);
    if (success) {
        document.getElementById('pairInput').value = '';
        document.getElementById('resultInput').value = '';
        document.getElementById('leverageInput').value = '';
        
        showNotification('–°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
        updateContent();
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
async function confirmDelete(year, month, category, index) {
    if (!checkAuth()) return;

    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å–¥–µ–ª–∫—É?')) {
        const success = await deleteTradeData(year, month, category, index);
        if (success) {
            showNotification('–°–¥–µ–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
            showTradesList();
            updateContent();
        }
    }
}

// –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
function clearInput() {
    const input = document.getElementById('bulkInput');
    if (input) {
        input.value = '';
        showNotification('–ü–æ–ª–µ –æ—á–∏—â–µ–Ω–æ', 'success');
    }
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'success', duration = 3000) {
    const notification = document.createElement('div');
    notification.className = `notification ${type} fade-in`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.classList.add('fade-out');
        setTimeout(() => notification.remove(), 300);
    }, duration);
}

// –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
document.addEventListener('DOMContentLoaded', initializeAdminPanel);
